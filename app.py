import streamlit as st
from supabase import create_client
from datetime import datetime

# ----------------------------
# Configuraci√≥n Supabase
# ----------------------------
SUPABASE_URL = st.secrets["supabase"]["url"]
SUPABASE_KEY = st.secrets["supabase"]["key"]
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# ----------------------------
# Diccionario Categor√≠a -> Subcategor√≠as
# ----------------------------
categorias = {
    "Alimentaci√≥n": [
        "Frutas y verduras",
        "Panader√≠a / reposter√≠a",
        "Restaurante / comida r√°pida",
        "Comida para llevar / delivery",
        "Snacks / caf√© / bebidas",
        "Bebidas alcoh√≥licas",
        "Otros alimentos especiales (org√°nicos, diet√©ticos, suplementos)"
    ],
    "Transporte": [
        "Gasolina / combustible",
        "Transporte p√∫blico (bus, metro, SITP, tren)",
        "Taxi / Uber / apps de transporte",
        "Mantenimiento de veh√≠culo (aceite, revisi√≥n, reparaciones)",
        "Seguros de veh√≠culo",
        "Peajes / parqueaderos",
        "Estacionamiento mensual / mensualidad de transporte",
        "Bicicleta / patineta / movilidad el√©ctrica"
    ],
    "Servicios": [
        "Luz / electricidad",
        "Agua / acueducto",
        "Gas",
        "Internet / datos m√≥viles",
        "Telefon√≠a fija / celular",
        "TV por cable / streaming",
        "Suscripciones digitales (Netflix, Spotify, software, apps)",
        "Limpieza / aseo (servicios dom√©sticos)",
        "Seguridad / alarma / vigilancia"
    ],
    "Salud": [
        "Medicamentos",
        "Consulta m√©dica general",
        "Especialistas (odontolog√≠a, dermatolog√≠a, oftalmolog√≠a‚Ä¶)",
        "Ex√°menes m√©dicos / laboratorio",
        "Gimnasio / actividades f√≠sicas",
        "Seguros de salud",
        "Terapias (psicol√≥gica, fisioterapia, etc.)",
        "Equipos o productos de salud (mascarillas, term√≥metros, vitaminas)"
    ],
    "Educaci√≥n": [
        "Matr√≠cula / colegiatura",
        "Libros / material did√°ctico",
        "Cursos / talleres / seminarios",
        "Software educativo / apps educativas"
    ],
    "Ocio / Entretenimiento": [
        "Cine / teatro / conciertos",
        "Deportes / hobbies",
        "Salidas / viajes / excursiones",
        "Videojuegos / apps de entretenimiento",
        "Caf√©s / bares / restaurantes sociales",
        "Libros, revistas, peri√≥dicos",
        "Suscripciones de ocio (streaming de pel√≠culas, m√∫sica, podcasts)"
    ],
    "Ahorro / Inversi√≥n": [
        "Cuenta de ahorro",
        "Fondo de inversi√≥n",
        "Criptomonedas / acciones / bolsa",
        "Caja de emergencia",
        "Planes de retiro / pensi√≥n",
        "Ahorro para metas espec√≠ficas (vacaciones, educaci√≥n, compra de veh√≠culo)",
        "Seguros de vida / seguros patrimoniales"
    ],
    "Otros": [
        "Mascotas: comida, veterinario, juguetes, cuidado",
        "Regalos / donaciones: cumplea√±os, navidad, eventos sociales",
        "Hogar: muebles, electrodom√©sticos, mantenimiento, reparaciones",
        "Ropa y accesorios: ropa diaria, calzado, accesorios, lavander√≠a",
        "Tecnolog√≠a / gadgets: celulares, computadoras, software, gadgets",
        "Eventos / celebraciones: fiestas, reuniones familiares, bodas"
    ],
    "Compras (Supermercado / Hogar)": [
        "Alimentos b√°sicos",
        "Carnes y prote√≠nas",
        "Frutas y verduras",
        "L√°cteos y derivados",
        "Bebidas",
        "Snacks y golosinas",
        "Panader√≠a y reposter√≠a",
        "Congelados y preparados",
        "Higiene y cuidado personal",
        "Limpieza y hogar",
        "Mascotas",
        "Otros / miscel√°neos"
    ]
}

# ----------------------------
# Funci√≥n principal
# ----------------------------
def main():
    st.title("Registro de Gastos con Subcategor√≠as Dependientes üöÄ")

    with st.form("form_registro"):
        Fecha = st.date_input("Fecha", value=datetime.today())
        Tipo = st.selectbox("Tipo", ["Ingreso", "Gasto"])
        Monto = st.number_input("Monto", min_value=0.0, step=0.01)

        # Selector de categor√≠a
        Categoria = st.selectbox("Categor√≠a", list(categorias.keys()))

        # Selector de subcategor√≠a depende de la categor√≠a
        if Categoria:
            Subcategoria = st.selectbox("Subcategor√≠a", categorias[Categoria])
        else:
            Subcategoria = st.text_input("Subcategor√≠a")

        CategoriaMercado = st.text_input("Categor√≠a de Mercado")
        Metodo = st.selectbox("M√©todo", ["Efectivo", "Transferencia", "Tarjeta", "Otro"])
        Responsable = st.text_input("Responsable")
        Descripcion = st.text_area("Descripci√≥n")
        Cuenta = st.text_input("Cuenta")
        Estado = st.selectbox("Estado", ["Pendiente", "Aprobado", "Rechazado"])

        submitted = st.form_submit_button("Guardar en Supabase")

        if submitted:
            data = {
                "Fecha": Fecha.isoformat(),
                "Tipo": Tipo,
                "Monto": Monto,
                "Categoria": Categoria,
                "Subcategoria": Subcategoria,
                "CategoriaMercado": CategoriaMercado,
                "Metodo": Metodo,
                "Responsable": Responsable,
                "Descripcion": Descripcion,
                "Cuenta": Cuenta,
                "Estado": Estado
            }
            try:
                response = supabase.table("personas").insert([data]).execute()
                if response.data:
                    st.success("‚úÖ Registro guardado en Supabase")
                else:
                    st.error(f"‚ùå Error al guardar: {response}")
            except Exception as e:
                st.error(f"‚ùå Error inesperado: {e}")

    # Bot√≥n para leer registros
    if st.button("Leer registros"):
        try:
            response = supabase.table("personas").select("*").execute()
            if response.data:
                st.write(response.data)
            else:
                st.warning("‚ö†Ô∏è No hay registros todav√≠a.")
        except Exception as e:
            st.error(f"‚ùå Error al leer: {e}")

# ----------------------------
# Ejecutar la app
# ----------------------------
if __name__ == "__main__":
    main()
