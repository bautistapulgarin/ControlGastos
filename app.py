import streamlit as st
from supabase import create_client
from datetime import datetime

# ----------------------------
# Configuraci√≥n Supabase
# ----------------------------
SUPABASE_URL = st.secrets["supabase"]["url"]
SUPABASE_KEY = st.secrets["supabase"]["key"]
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# ----------------------------
# Diccionario Categor√≠a -> Subcategor√≠as
# ----------------------------
categorias = {
    "Alimentaci√≥n": [
        "Frutas y verduras",
        "Panader√≠a / reposter√≠a",
        "Restaurante / comida r√°pida",
        "Comida para llevar / delivery",
        "Snacks / caf√© / bebidas",
        "Bebidas alcoh√≥licas",
        "Otros alimentos especiales (org√°nicos, diet√©ticos, suplementos)"
    ],
    "Transporte": [
        "Gasolina / combustible",
        "Transporte p√∫blico (bus, metro, SITP, tren)",
        "Taxi / Uber / apps de transporte",
        "Mantenimiento de veh√≠culo (aceite, revisi√≥n, reparaciones)",
        "Seguros de veh√≠culo",
        "Peajes / parqueaderos",
        "Estacionamiento mensual / mensualidad de transporte",
        "Bicicleta / patineta / movilidad el√©ctrica"
    ]
    # ... agrega las dem√°s categor√≠as como antes
}

# ----------------------------
# Inicializar session_state para categor√≠a/subcategor√≠a
# ----------------------------
if "Categoria" not in st.session_state:
    st.session_state.Categoria = ""
if "Subcategoria" not in st.session_state:
    st.session_state.Subcategoria = ""

# ----------------------------
# Funci√≥n principal
# ----------------------------
st.title("Registro de Gastos con Subcategor√≠as Dependientes üöÄ")

# Selecci√≥n de categor√≠a
Categoria = st.selectbox("Categor√≠a", list(categorias.keys()), index=0)
if Categoria != st.session_state.Categoria:
    st.session_state.Categoria = Categoria
    st.session_state.Subcategoria = categorias[Categoria][0]  # reinicia subcategor√≠a al cambiar categor√≠a

# Selecci√≥n de subcategor√≠a
Subcategoria = st.selectbox(
    "Subcategor√≠a",
    categorias[st.session_state.Categoria],
    index=categorias[st.session_state.Categoria].index(st.session_state.Subcategoria)
)
st.session_state.Subcategoria = Subcategoria

# Otros campos
Fecha = st.date_input("Fecha", value=datetime.today())
Tipo = st.selectbox("Tipo", ["Ingreso", "Gasto"])
Monto = st.number_input("Monto", min_value=0.0, step=0.01)
CategoriaMercado = st.text_input("Categor√≠a de Mercado")
Metodo = st.selectbox("M√©todo", ["Efectivo", "Transferencia", "Tarjeta", "Otro"])
Responsable = st.text_input("Responsable")
Descripcion = st.text_area("Descripci√≥n")
Cuenta = st.text_input("Cuenta")
Estado = st.selectbox("Estado", ["Pendiente", "Aprobado", "Rechazado"])

# Bot√≥n de guardar
if st.button("Guardar en Supabase"):
    data = {
        "Fecha": Fecha.isoformat(),
        "Tipo": Tipo,
        "Monto": Monto,
        "Categoria": st.session_state.Categoria,
        "Subcategoria": st.session_state.Subcategoria,
        "CategoriaMercado": CategoriaMercado,
        "Metodo": Metodo,
        "Responsable": Responsable,
        "Descripcion": Descripcion,
        "Cuenta": Cuenta,
        "Estado": Estado
    }
    try:
        response = supabase.table("personas").insert([data]).execute()
        if response.data:
            st.success("‚úÖ Registro guardado en Supabase")
        else:
            st.error(f"‚ùå Error al guardar: {response}")
    except Exception as e:
        st.error(f"‚ùå Error inesperado: {e}")

# Bot√≥n para leer registros
if st.button("Leer registros"):
    try:
        response = supabase.table("personas").select("*").execute()
        if response.data:
            st.write(response.data)
        else:
            st.warning("‚ö†Ô∏è No hay registros todav√≠a.")
    except Exception as e:
        st.error(f"‚ùå Error al leer: {e}")
